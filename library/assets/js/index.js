console.log('-----total=200-----');

console.group('Этап 1: Пользователь не зарегистрирован');

console.group('Ограниченная карусель в блоке About');
console.log(
  '-Карусель реагирует на нажатие кнопок (кнопки под каруселью и стрелочки слева и справа в мобильной версии) и происходит анимация перелистывания. +15\n\n'
);
console.log(
  '-На экране шириной 1440px проверяем, чтобы было доступно 2 других скрытых картинки. При каждом нажатии выезжает следующая, и так до границ справа и слева. +2\n\n'
);
console.log(
  '-Выделенная кнопка под каруселью (имеется ввиду кнопка соответствующая активному слайду и которая имеет коричневый цвет) - неактивная. +2\n\n'
);
console.log(
  '-Если анимация карусели не успела завершиться, при этом нажата была следующая кнопка, то картинка не должна зависнуть в промежуточном состоянии. +2\n\n'
);
console.log(
  '-На экране шириной 768px проверяем, чтобы было доступно 4 других скрытых картинки. Для этого меняем разрешение и перезагружаем страницу. Теперь доступных перемещений становится 5. +2\n\n'
);
console.log(
  '-Неактивными становятся не только выделенные кнопки, но и стрелочки на границах карусели. +2\n\n'
);
console.groupEnd();

console.group('Слайдер в блоке Favorites');
console.log(
  '-"Слайдер" реагирует на нажатие кнопок панели навигации и происходит анимация затухания и проявления. +15\n\n'
);
console.log(
  '-На любой ширине экрана все 4 карточки с книгами одновременно будут плавно затухать, а затем плавно проявляться следующие. +2\n\n'
);
console.log(
  '-Анимация может быть прервана следующим нажатием на кнопку выбора поры года, но при этом анимация не должна застывать в промежуточном состоянии. Если анимация не была прервана следующим нажатием кнопки, то она должна отрабатывать до конца. +2n\n'
);
console.log(
  '-Во время анимаций высота блока Favorites не должна меняться. +2\n\n'
);
console.log(
  '-❗Панель навигации "слайдера" сделана по технологии "sticky" для разрешений с одним рядом книг (768px и меньше), т.е. опускается вниз вместе со скроллом страницы, прилипая к верхней части экрана, в рамках блока Favorites. +2\n\n'
);

console.groupEnd();

console.group('До регистрации');
console.log('-Нажатие на кнопку Check the card ни к чему не приведёт.\n\n');
console.groupEnd();

console.group('До авторизации');
console.log('-Иконка юзера в хедере отображается в виде силуэта.\n\n');
console.log(
  '-В блоке Favorites все кнопки должны иметь имя Buy, а не Own. +2\n\n'
);
console.groupEnd();

console.groupEnd();

//-----Этап 2

console.group('Этап 2: Пользователь на этапе регистрации');

console.group('Меню авторизации при нажатии на иконку пользователя');
console.log(
  'Нажатие на иконку пользователя в хедере открывает меню, которое должно оказаться под иконкой таким образом, что правый верхний угол меню находится в той же точке, что и нижний правый угол контейнера с иконкой в хедере. Меню под иконкой. +2\n\n'
);
console.log(
  '-На разрешении 768px, при открытом бургер-меню, оно закрывается и открывается меню авторизации. +2\n\n'
);
console.log(
  '-То же верно и в обратную сторону, кнопка бургер-меню должна быть доступна при открытом меню авторизации. +2\n\n'
);
console.log(
  '-Нажатие на любую область или элемент вне меню приводят к закрытию меню авторизации. +2\n\n'
);
console.groupEnd();

console.group('Модальное окно REGISTER');
console.log(
  '-Дизайн модального окна соответствует макету. +15 (позже появятся пункты оценки по каждому элементу в отдельности).\n\n'
);
console.log(
  '-Окно центрировано, а область вокруг затемнена (насколько затемнена - не имеет значения). +2\n\n'
);
console.log(
  '-При нажатии на крестик в углу окна, или на затемнённую область вне этого окна, оно закрывается. +2\n\n'
);
console.log(
  '-В данном случае, ограничения по полям - все поля должны быть не пустыми. +2\n\n'
);
console.log('-Пароль должен быть не короче 8 символов. +2\n\n');
console.log('-В поле E-mail должна быть валидация типа email. +2\n\n');

console.groupEnd();

console.group('Окончание регистрации');
console.log(
  '-Данные сохраняются в хранилище localStorage, в том числе и пароль, хотя в реальной жизни так делать нельзя. +2\n\n'
);
console.log('-Иконка пользователя меняется на заглавные буквы имени. +2\n\n');
console.log(
  '-Отображение страницы приходит в состояние после авторизации (этап 4). +2\n\n'
);
console.log(
  '-Будет сгенерирован девятизначный Card Number случайным образом в формате 16-ричного числа. +2\n\n'
);
console.groupEnd();

console.group('При наличии регистрации, но будучи не авторизованным');
console.log(
  '-Блок Digital Library Cards. Если введённые имя и номер карты совпадают с данными пользователя, то отображается панель с информацией, вместо кнопки Check the card на 10 секунд. +2\n\n'
);
console.log(
  '-Там же после отображения информации, кнопка возвращается в прежнее состояние, а поля в форме сбрасываются. +2\n\n'
);
console.groupEnd();

console.groupEnd();

//-----Этап 3

console.group(
  'Этап 3: Пользователь на этапе входа в учётную запись после регистрации.'
);

console.group('Модальное окно LOGIN');
console.log(
  '-Дизайн модального окна соответствует макету. +15 (позже появятся пункты оценки по каждому элементу в отдельности).\n\n'
);
console.log(
  '-При нажатии на кнопку Log In появляется модальное окно LOGIN, где есть поля E-mail or readers card и Password. +2\n\n'
);
console.log(
  '-При нажатии кнопки Log In в блоке Digital Library Cards также появляется модальное окно LOGIN. +2\n\n'
);
console.log(
  '-Окно центрировано, а область вокруг затемнена (насколько затемнена - не имеет значения). +2\n\n'
);
console.log(
  '-При нажатии на крестик в углу окна, или на затемнённую область вне этого окна, оно закрывается. +2\n\n'
);
console.log('-Для авторизации все поля должны быть не пустыми. +2\n\n');
console.log('-Пароль должен быть не короче 8 символов. +2\n\n');
console.groupEnd();

console.group('Блок Favorites');
console.log(
  '-Если пользователь ещё не вошёл в учётную запись, то при нажатии на любую кнопку Buy открывается модальное окно LOGIN. +2.\n\n'
);
console.groupEnd();

console.groupEnd();

//-----Этап 4

console.group('Этап 4: Пользователь после входа в учётную запись');

console.group('Меню профиля при нажатии на иконку с инициалами пользователя');
console.log(
  '-При наведении курсором на иконку пользователя должно отображаться полное имя пользователя (атрибут title). +2\n\n'
);
console.log(
  '-Нажатие на иконку пользователя в хедере открывает меню, которое должно оказаться под иконкой таким образом, что правый верхний угол меню находится в той же точке, что и нижний правый угол контейнера с иконкой в хедере. Меню под иконкой. +2\n\n'
);
console.log(
  '-На разрешении 768px при открытом бургер-меню, оно закрывается и открывается меню авторизации. +2\n\n'
);
console.log(
  'То же верно и в обратную сторону, кнопка бургер-меню должна быть доступна. +2\n\n'
);
console.log(
  '-Нажатие на любую область или элемент вне меню приводят к закрытию меню профиля. +2\n\n'
);
console.log(
  '-❗Вместо надписи Profile отображается девятизначный Card Number. Для Card Number можно использовать меньший шрифт чтобы надпись вметилась в контейнер, +2\n\n'
);
console.log(
  '-Нажатие на кнопку My Profile открывает модальное окно MY PROFILE. +2\n\n'
);
console.log(
  '-Нажатие на кнопку Log Out приводит к выходу пользователю из состояния авторизации, возвращаемся к этапу #1. +2\n\n'
);
console.groupEnd();

console.group('Модальное окно MY PROFILE');
console.log(
  '-Дизайн модального окна соответствует макету. +15 (позже появятся пункты оценки по каждому элементу в отдельности).\n\n'
);
console.log(
  '-В случае если имя и фамилия слишком длинные и не влазят в блок то должен произойти перенос фамилии на следующую строку.\n\n'
);
console.log(
  '-Счетчик для Visits отображает, сколько раз пользователь проходил процесс авторизации, включая самый первый - регистрацию. +2\n\n'
);
console.log(
  '-Счетчик для Books отображает, сколько у пользователя книг находятся в состоянии Own. Значение варьируется 0-16. +2\n\n'
);
console.log(
  '-Рядом с Card Number есть кнопка, нажатие на которую копирует код карты клиента в буфер обмена. +2\n\n'
);
console.log(
  '-Окно центрировано, а область вокруг затемнена (насколько затемнена - не имеет значения). +2\n\n'
);
console.log(
  '-При нажатии на крестик в углу окна, или на затемненную область вне этого окна, оно закрывается. +2\n\n'
);
console.groupEnd();
console.group('Блок Favorites');
console.log(
  '-При нажатии на любую кнопку Buy, еще до покупки абонемента, открывается модальное окно BUY A LIBRARY CARD. +2\n\n'
);
console.log(
  '-При нажатии на любую кнопку Buy, после покупки абонемента, меняет вид кнопки на неактивную Own, добавляя единицу к счетчику книг в профиле. +2\n\n'
);
console.log(
  '-Кроме того после нажатия обновляется не только счетчик, но и название книги должно отобразится в разделе Rented Books. Название формируется по принципу <название книги>, <автор книги>. В случае если название книги слишком длинное или список стал слишком большой список книг в блоке Rented Books становится скроллируемым (по необходимости горизонтально/ вертикально или оба скролла сразу) Тайтл Rented Books скроллироваться не должен +2\n\n'
);
console.groupEnd();
console.group('Модальное окно BUY A LIBRARY CARD');
console.log(
  '-❗Модальное окно нужно сделать шириной 640px. Будет это обрезка по 5px по бокам, или просто уменьшение длины с сохранением сетки - значения не имеет, хотя при правильной сеточной структуре, сделать это будет намного проще. +2\n\n'
);
console.log(
  '-Дизайн модального окна соответствует макету. +15 (позже появятся пункты оценки по каждому элементу в отдельности).\n\n'
);
console.log(
  '-При нажатии на крестик в углу окна, или на затемнённую область вне этого окна, оно закрывается. +2\n\n'
);
console.log(
  '-Для того, чтобы кнопка Buy была активна, все поля должны быть не пустыми. +2\n\n'
);
console.log(
  '-Bank card number должен содержать 16 цифр. С пробелами каждые 4 символа или нет - значения не имеет. +2\n\n'
);
console.log(
  '-Expiration code содержит 2 поля с ограничением в 2 цифры. +2\n\n'
);
console.log(
  '-Expiration code содержит 2 поля с ограничением в 2 цифры. +2\n\n'
);
console.log(
  '-После удачного нажатия на кнопку Buy, окно закрывается, и больше мы к нему не возвращаемся.\n\n'
);
console.groupEnd();
console.group('Блок Digital Library Cards');
console.log(
  '-При наличии авторизации вместо кнопки Check the Card будут отображаться данные пользователя и бейджи, как на дизайне LibraryCard after login in account. +2\n\n'
);
console.groupEnd();

console.groupEnd();

console.log('-----total=200-----');
